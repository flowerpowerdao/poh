type Result = 
 variant {
   err: CheckStatusError;
   ok;
 };
type PohVerificationStatus = 
 variant {
   expired;
   notSubmitted;
   pending;
   rejected;
   startPoh;
   verified;
 };
type PohVerificationResponsePlus = 
 record {
   challenges: vec ChallengeResponse;
   completedAt: opt int;
   isFirstAssociation: bool;
   providerId: principal;
   providerUserId: text;
   rejectionReasons: vec text;
   requestedAt: opt int;
   status: PohVerificationStatus;
   submittedAt: opt int;
   token: opt text;
 };
type PohChallengeStatus = 
 variant {
   expired;
   notSubmitted;
   pending;
   rejected;
   verified;
 };
type Nanos = nat64;
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type CheckStatusError = 
 variant {
   alreadyWhitelisted;
   noTokenFound;
   notFirstAssociation;
   pending;
   pohNotCompleted;
   pohRejected;
   principalBlacklisted;
   whitelistIsFull;
 };
type ChallengeResponse = 
 record {
   challengeId: text;
   completedOn: opt int;
   status: PohChallengeStatus;
 };
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
service : {
  callback: (PohVerificationResponsePlus) -> () oneway;
  checkStatus: () -> (Result);
  getBlacklist: () -> (vec principal);
  getBlacklistQuery: () -> (vec principal) query;
  getCanisterLog: (opt CanisterLogRequest) -> (opt CanisterLogResponse) query;
  getOwner: () -> (principal) query;
  getPending: () -> (vec principal);
  getPendingQuery: () -> (vec principal) query;
  getQueue: () -> (vec record {
                         principal;
                         text;
                       });
  getQueueQuery: () -> (vec record {
                              principal;
                              text;
                            }) query;
  getToken: () -> (opt text);
  getWhitelist: () -> (vec principal);
  getWhitelistQuery: () -> (vec principal) query;
  getWhitelistSize: () -> (nat) query;
  isBlacklisted: (principal) -> (bool);
  isBlacklistedQuery: (principal) -> (bool) query;
  isPending: (principal) -> (bool);
  isPendingQuery: (principal) -> (bool) query;
  isQueued: (principal) -> (bool);
  isQueuedQuery: (principal) -> (bool) query;
  isWhitelisted: (principal) -> (bool);
  isWhitelistedQuery: (principal) -> (bool) query;
  registerCallback: () -> (text);
  remainingSpots: () -> (nat) query;
  setup: () -> () oneway;
  whitelistIsFull: () -> (bool) query;
}
