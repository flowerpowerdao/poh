type Whitelist = 
 service {
   callback: (PohVerificationResponsePlus) -> () oneway;
   checkStatus: () -> (Result);
   getBlacklist: () -> (vec principal);
   getBlacklistQuery: () -> (vec principal) query;
   getQueue: () -> (vec record {
                          principal;
                          text;
                        });
   getQueueQuery: () -> (vec record {
                               principal;
                               text;
                             }) query;
   getToken: () -> (opt text);
   getWhitelist: () -> (vec principal);
   getWhitelistQuery: () -> (vec principal) query;
   isBlacklisted: (principal) -> (bool);
   isBlacklistedQuery: (principal) -> (bool) query;
   isQueued: (principal) -> (bool);
   isQueuedQuery: (principal) -> (bool) query;
   isWhitelisted: (principal) -> (bool);
   isWhitelistedQuery: (principal) -> (bool) query;
   registerCallback: () -> () oneway;
 };
type Result = 
 variant {
   err: CheckStatusError;
   ok;
 };
type PohVerificationStatus = 
 variant {
   expired;
   notSubmitted;
   pending;
   rejected;
   startPoh;
   verified;
 };
type PohVerificationResponsePlus = 
 record {
   challenges: vec ChallengeResponse;
   completedAt: opt int;
   isFirstAssociation: bool;
   providerId: principal;
   providerUserId: text;
   rejectionReasons: vec text;
   requestedAt: opt int;
   status: PohVerificationStatus;
   submittedAt: opt int;
   token: opt text;
 };
type PohChallengeStatus = 
 variant {
   expired;
   notSubmitted;
   pending;
   rejected;
   verified;
 };
type CheckStatusError = 
 variant {
   alreadyWhitelisted;
   noTokenFound;
   notFirstAssociation;
   pohAlreadyInitiated;
   pohNotCompleted;
   pohRejected;
   principalBlacklisted;
 };
type ChallengeResponse = 
 record {
   challengeId: text;
   completedOn: opt int;
   status: PohChallengeStatus;
 };
service : () -> Whitelist
